一、xml解析：四种：dom、sax、jdom、dom4j
二、DOM:DOM的全称是Document Object Model，
    也即文档对象模型。在应用程序中，基于DOM的XML分析器将一个XML文档转换成一个对象模型的集合（通常称DOM树），应用程序正是通过对这个对象模型的操作，来实现对XML文档数据的操作。
    通过DOM接口，应用程序可以在任何时候访问XML文档中的任何一部分数据，因此，这种利用DOM接口的机制也被称作随机访问机制。
    优点：
　　　　　1、形成了树结构，有助于更好的理解、掌握，且代码容易编写。
　　　　　2、解析过程中，树结构保存在内存中，方便修改。
　　缺点：
　　　　　1、由于文件是一次性读取，所以对内存的耗费比较大。
　　　　　2、如果XML文件比较大，容易影响解析性能且可能会造成内存溢出。
三、SAX:SAX的全称是Simple APIs for XML，也即XML简单应用程序接口。与DOM不同，SAX提供的访问模式是一种顺序模式，这是一种快速读写XML数据的方式。
    当使用SAX分析器对XML文档进行分析时，会触发一系列事件，并激活相应的事件处理函数，应用程序通过这些事件处理函数实现对XML文档的访问，因而SAX接口也被称作事件驱动接口。
    优点：
　　　　　1、采用事件驱动模式，对内存耗费比较小。
　　　　　2、适用于只处理XML文件中的数据时。
　　缺点：
　　　　　1、编码比较麻烦。
　　　　　2、很难同时访问XML文件中的多处不同数据。
四、JDOM：
    1、仅使用具体类，而不使用接口。
    2、API大量使用了Collections类。
五、DOM4J：
    1、JDOM的一种智能分支，它合并了许多超出基本XML文档表示的功能。
    2、它使用接口和抽象基本类方法。
    3、具有性能优异、灵活性好、功能强大和极端易用的特点。
    4、是一个开放源码的文件
六、总结：
    DOM4J性能最好，连Sun的JAXM也在用DOM4J。目前许多开源项目中大量采用DOM4J，例如大名鼎鼎的Hibernate也用DOM4J来读取XML配置文件。如果不考虑可移植性，那就采用DOM4J。
JDOM和DOM在性能测试时表现不佳，在测试10M文档时内存溢出。在小文档情况下还值得考虑使用DOM和JDOM。虽然JDOM的开发者已经说明他们期望在正式发行版前专注性能问题，但是从性能观点来看，它确实没有值得推荐之处。另外，DOM仍是一个非常好的选择。DOM实现广泛应用于多种编程语言。它还是许多其它与XML相关的标准的基础，因为它正式获得W3C推荐（与基于非标准的Java模型相对），所以在某些类型的项目中可能也需要它（如在JavaScript中使用DOM）。
SAX表现较好，这要依赖于它特定的解析方式－事件驱动。一个SAX检测即将到来的XML流，但并没有载入到内存（当然当XML流被读入时，会有部分文档暂时隐藏在内存中）。